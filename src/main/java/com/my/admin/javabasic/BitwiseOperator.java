package com.my.admin.javabasic;

/**
 * 位运算符
 */
public class BitwiseOperator {
    public static void main(String[] args){
//        int x = 5;
        //按位取反（一元运算符）
        //TODO 重要公式 一个正数对应的负数=正数的补码+1，正数的补码=它的负数-1
//        System.out.println(~x);
        /**
         * /TODO
         * 负数二进制转十进制步骤：1》按位取反，2》+1，3》符号位置1，4》在按照正数二进制转十进制得出结果
         * 例子 int -5 对应的二进制是11111111111111111111111111111011
         * 第一步：                00000000000000000000000000000100
         * 第二步：                00000000000000000000000000000101
         * 第三步：                10000000000000000000000000000101
         * 第四步：                101= 1*（2的二次方）+1*（2的0次方）= 4+1 = 5，符号位是1，则 -5
         */
        /**
         * << 按位左移运算符：所有位左移，左边最高位被丢弃，右边补0
         */
//        int a = 25,
//                b = -729191;
//        System.out.println(a<<3);
//        System.out.println(b<<12);
        /**
         * >> 按位右移运算符：所有位右移，右边最低位被丢弃，左边补0，最高位0（符号位）与之前最高位一直
         * >>> 按位右移运算符：所有位右移，右边最低位被丢弃，左边补0
         * 区别就在于 >>与原符号位一直，>>>不管不符号位，所以必定是0
         * -5的二进制是       11111111111111111111111111111011
         * >>               11111111111111111111111111111111      值就是-1
         * >>>              00000111111111111111111111111111      值就是134217727
         */
        int i = -5,
                j = -5;
        System.out.println(i >> 5);
        System.out.println(j >>> 5);
    }

}
